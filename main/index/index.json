{
  "interfaceLanguages" : {
    "swift" : [
      {
        "children" : [
          {
            "title" : "Classes",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cachemanager\/name-swift.struct\/init(rawvalue:)",
                    "title" : "init(rawValue: CacheManager<Object>.Name.RawValue)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cachemanager\/name-swift.struct\/rawvalue-swift.property",
                    "title" : "let rawValue: CacheManager<Object>.Name.RawValue",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cachemanager\/name-swift.struct\/rawvalue-swift.typealias",
                    "title" : "CacheManager.Name.RawValue",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cachemanager\/name-swift.struct\/default",
                    "title" : "static var `default`: CacheManager<Object>.Name",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/cachemanager\/name-swift.struct",
                "title" : "CacheManager.Name",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/cachemanager\/init(name:shouldmigratefromoldnamingbehavior:)",
                "title" : "init(name: CacheManager<Object>.Name, shouldMigrateFromOldNamingBehavior: Bool) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/cachemanager\/clearsmemorycacheperiodically",
                "title" : "var clearsMemoryCachePeriodically: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/cachemanager\/name-swift.property",
                "title" : "let name: CacheManager<Object>.Name",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/cachemanager\/cache(object:for:)",
                "title" : "func cache(object: Object, for: CacheManager<Object>.ObjectIdentification) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/cachemanager\/cacheobject(for:at:)",
                "title" : "func cacheObject(for: CacheManager<Object>.ObjectIdentification, at: URL) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/cachemanager\/clearcache()",
                "title" : "func clearCache() throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/cachemanager\/clearmemorycache()",
                "title" : "func clearMemoryCache()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/cachemanager\/object(for:)",
                "title" : "func object(for: CacheManager<Object>.ObjectIdentification) throws -> Object?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/cachemanager\/objectexists(for:)",
                "title" : "func objectExists(for: CacheManager<Object>.ObjectIdentification) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/cachemanager\/removeobject(for:)",
                "title" : "func removeObject(for: CacheManager<Object>.ObjectIdentification) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/cachemanager\/urlofobject(with:)",
                "title" : "func urlOfObject(with: CacheManager<Object>.ObjectIdentification) throws -> URL?",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/cachemanager\/objectidentification",
                "title" : "CacheManager.ObjectIdentification",
                "type" : "typealias"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/cachemanager\/cachefolder(in:)",
                "title" : "static func cacheFolder(in: FileManager) throws -> URL",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/fffoundation\/cachemanager",
            "title" : "CacheManager",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/init()",
                "title" : "convenience init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/init(error:)",
                "title" : "convenience init<Success, Failure>(error: Failure)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/init(value:)-5wqc8",
                "title" : "convenience init(value: Value)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/init(value:)-6ku0p",
                "title" : "convenience init<Success, Failure>(value: Success)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/await()-51xoc",
                "title" : "func await<Success, Failure>() throws -> Success",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/await()-ssyt",
                "title" : "func await() -> Value",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/cascade(other:)-447ok",
                "title" : "func cascade(other: GCDFuture<Value>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/cascade(other:)-hxwb",
                "title" : "func cascade<Success, Failure>(other: GCDFutureResult<Success, Failure>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/complete(with:)-1937y",
                "title" : "func complete<Success>(with: () async throws -> Success) -> Task<Void, Never>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/complete(with:)-52gr1",
                "title" : "func complete(with: Value)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/complete(with:)-xzwb",
                "title" : "func complete(with: () async -> Value) -> Task<Void, Never>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/fail(with:)",
                "title" : "func fail<Success, Failure>(with: Failure)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/flatmap(_:)-4doz2",
                "title" : "func flatMap<Success, T>((Success) throws -> GCDFutureResult<T, Error>) -> GCDFutureResult<T, Error>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/flatmap(_:)-5jev4",
                "title" : "func flatMap<T>((Value) -> GCDFuture<T>) -> GCDFuture<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/flatmap(_:)-61r79",
                "title" : "func flatMap<T>((Value) throws -> GCDFuture<T>) -> GCDFutureResult<T, Error>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/map(_:)-51u4y",
                "title" : "func map<Success, Failure, T>((Success) throws -> T) -> GCDFutureResult<T, Error>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/map(_:)-9k4q",
                "title" : "func map<T>((Value) -> T) -> GCDFuture<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/map(_:)-9oa25",
                "title" : "func map<T>((Value) throws -> T) -> GCDFutureResult<T, Error>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/onerror(do:)",
                "title" : "func onError<Success, Failure>(do: (Failure) -> ())",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/onsuccess(do:)",
                "title" : "func onSuccess<Success, Failure>(do: (Success) -> ())",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/succeed(with:)",
                "title" : "func succeed<Success, Failure>(with: Success)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/wait()-3bv35",
                "title" : "func wait<Success, Failure>() throws -> Success",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/wait()-6udq2",
                "title" : "func wait() -> Value",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/whendone(do:)",
                "title" : "func whenDone(do: GCDFuture<Value>.Handler)",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/gcdfuture\/handler",
                "title" : "GCDFuture.Handler",
                "type" : "typealias"
              }
            ],
            "path" : "\/documentation\/fffoundation\/gcdfuture",
            "title" : "GCDFuture",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/ref\/init()",
                "title" : "convenience init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/ref\/init(wrappedvalue:)",
                "title" : "init(wrappedValue: Referenced)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/ref\/projectedvalue",
                "title" : "var projectedValue: Lens<Referenced>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/ref\/wrappedvalue",
                "title" : "var wrappedValue: Referenced",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/ref\/copy()",
                "title" : "func copy() -> Self",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/ref\/'...(_:)-178zv",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/ref\/'...(_:)-96pzr",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/ref\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/ref\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/ref\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/ref\/_(_:_:)-1byy1",
                    "title" : "static func < (Ref<Referenced>, Ref<Referenced>) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/ref\/_(_:_:)-2stvc",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/ref\/_=(_:_:)-43i0o",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/ref\/_=(_:_:)-jnh1",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/ref\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/ref\/init(from:)",
                    "title" : "convenience init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/ref\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/ref\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/ref\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/ref\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/ref\/==(_:_:)",
                    "title" : "static func == (Ref<Referenced>, Ref<Referenced>) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/ref\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/ref\/init(booleanliteral:)",
                    "title" : "convenience init(booleanLiteral: Referenced.BooleanLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/ref\/expressiblebybooleanliteral-implementations",
                "title" : "ExpressibleByBooleanLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/ref\/init(extendedgraphemeclusterliteral:)",
                    "title" : "convenience init(extendedGraphemeClusterLiteral: Referenced.ExtendedGraphemeClusterLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/ref\/expressiblebyextendedgraphemeclusterliteral-implementations",
                "title" : "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/ref\/init(floatliteral:)",
                    "title" : "convenience init(floatLiteral: Referenced.FloatLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/ref\/expressiblebyfloatliteral-implementations",
                "title" : "ExpressibleByFloatLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/ref\/init(integerliteral:)",
                    "title" : "convenience init(integerLiteral: Referenced.IntegerLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/ref\/expressiblebyintegerliteral-implementations",
                "title" : "ExpressibleByIntegerLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/ref\/init(nilliteral:)",
                    "title" : "convenience init(nilLiteral: ())",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/ref\/expressiblebynilliteral-implementations",
                "title" : "ExpressibleByNilLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/ref\/init(stringinterpolation:)",
                    "title" : "convenience init(stringInterpolation: Referenced.StringInterpolation)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/ref\/expressiblebystringinterpolation-implementations",
                "title" : "ExpressibleByStringInterpolation Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/ref\/init(stringliteral:)",
                    "title" : "convenience init(stringLiteral: Referenced.StringLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/ref\/expressiblebystringliteral-implementations",
                "title" : "ExpressibleByStringLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/ref\/init(unicodescalarliteral:)",
                    "title" : "convenience init(unicodeScalarLiteral: Referenced.UnicodeScalarLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/ref\/expressiblebyunicodescalarliteral-implementations",
                "title" : "ExpressibleByUnicodeScalarLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/ref\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/ref\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/fffoundation\/ref",
            "title" : "Ref",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/synchronized\/init()",
                "title" : "convenience init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/synchronized\/init(value:qos:)",
                "title" : "init(value: Guarded, qos: DispatchQoS)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/synchronized\/init(wrappedvalue:)",
                "title" : "convenience init(wrappedValue: Guarded)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/synchronized\/wrappedvalue",
                "title" : "var wrappedValue: Guarded",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/synchronized\/combined(with:)-2j0co",
                "title" : "func combined<OtherGuarded>(with: Synchronized<OtherGuarded>) -> Synchronized<(Guarded, OtherGuarded)>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/synchronized\/combined(with:)-7o6uw",
                "title" : "func combined(with: Synchronized<Guarded>) -> Synchronized<(Guarded, Guarded)>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/synchronized\/coordinated(with:)-8zn81",
                "title" : "func coordinated<OtherGuarded>(with: Synchronized<OtherGuarded>) -> (Guarded, OtherGuarded)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/synchronized\/coordinated(with:)-9aw0d",
                "title" : "func coordinated(with: Synchronized<Guarded>) -> (Guarded, Guarded)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/synchronized\/exchange(with:)",
                "title" : "func exchange(with: Guarded) -> Guarded",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/synchronized\/withvalue(do:)",
                "title" : "func withValue<T>(do: (inout Guarded) throws -> T) rethrows -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/synchronized\/withvaluevoid(do:)",
                "title" : "func withValueVoid(do: (inout Guarded) throws -> Void) rethrows",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/synchronized\/subscript(_:)",
                "title" : "subscript<T>(KeyPath<Guarded, T>) -> T",
                "type" : "subscript"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/synchronized\/'...(_:)-7k41s",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/synchronized\/'...(_:)-8ub49",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/synchronized\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/synchronized\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/synchronized\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/synchronized\/_(_:_:)-354ym",
                    "title" : "static func < (Synchronized<Guarded>, Synchronized<Guarded>) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/synchronized\/_(_:_:)-4smg0",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/synchronized\/_=(_:_:)-3toy7",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/synchronized\/_=(_:_:)-4xt8",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/synchronized\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/synchronized\/init(from:)",
                    "title" : "convenience init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/synchronized\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/synchronized\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/synchronized\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/synchronized\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/synchronized\/==(_:_:)",
                    "title" : "static func == (Synchronized<Guarded>, Synchronized<Guarded>) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/synchronized\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/synchronized\/init(booleanliteral:)",
                    "title" : "convenience init(booleanLiteral: Guarded.BooleanLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/synchronized\/expressiblebybooleanliteral-implementations",
                "title" : "ExpressibleByBooleanLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/synchronized\/init(extendedgraphemeclusterliteral:)",
                    "title" : "convenience init(extendedGraphemeClusterLiteral: Guarded.ExtendedGraphemeClusterLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/synchronized\/expressiblebyextendedgraphemeclusterliteral-implementations",
                "title" : "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/synchronized\/init(floatliteral:)",
                    "title" : "convenience init(floatLiteral: Guarded.FloatLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/synchronized\/expressiblebyfloatliteral-implementations",
                "title" : "ExpressibleByFloatLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/synchronized\/init(integerliteral:)",
                    "title" : "convenience init(integerLiteral: Guarded.IntegerLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/synchronized\/expressiblebyintegerliteral-implementations",
                "title" : "ExpressibleByIntegerLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/synchronized\/init(nilliteral:)",
                    "title" : "convenience init(nilLiteral: ())",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/synchronized\/expressiblebynilliteral-implementations",
                "title" : "ExpressibleByNilLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/synchronized\/init(stringinterpolation:)",
                    "title" : "convenience init(stringInterpolation: Guarded.StringInterpolation)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/synchronized\/expressiblebystringinterpolation-implementations",
                "title" : "ExpressibleByStringInterpolation Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/synchronized\/init(stringliteral:)",
                    "title" : "convenience init(stringLiteral: Guarded.StringLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/synchronized\/expressiblebystringliteral-implementations",
                "title" : "ExpressibleByStringLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/synchronized\/init(unicodescalarliteral:)",
                    "title" : "convenience init(unicodeScalarLiteral: Guarded.UnicodeScalarLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/synchronized\/expressiblebyunicodescalarliteral-implementations",
                "title" : "ExpressibleByUnicodeScalarLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/synchronized\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/synchronized\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/fffoundation\/synchronized",
            "title" : "Synchronized",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/timer\/init(interval:repeats:queue:userinfo:block:)",
                "title" : "init(interval: TimeInterval, repeats: Bool, queue: DispatchQueue, userInfo: T?, block: Timer<T>.Block)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/timer\/block-swift.property",
                "title" : "let block: Timer<T>.Block",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/timer\/interval",
                "title" : "let interval: TimeInterval",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/timer\/isvalid",
                "title" : "var isValid: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/timer\/repeats",
                "title" : "let repeats: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/timer\/tolerance",
                "title" : "var tolerance: TimeInterval",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/timer\/userinfo",
                "title" : "var userInfo: T?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/timer\/fire()",
                "title" : "func fire()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/timer\/invalidate()",
                "title" : "func invalidate()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/timer\/schedule()",
                "title" : "func schedule()",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/timer\/block-swift.typealias",
                "title" : "Timer.Block",
                "type" : "typealias"
              }
            ],
            "path" : "\/documentation\/fffoundation\/timer",
            "title" : "Timer",
            "type" : "class"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/cachable\/cachedata()",
                "title" : "func cacheData() throws -> Data",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/cachable\/fromcache(data:)",
                "title" : "static func fromCache(data: Data) throws -> Self",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/fffoundation\/cachable",
            "title" : "Cachable",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/fffoundation\/codableuserdefaultsstorable",
            "title" : "CodableUserDefaultsStorable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/copyable\/copy()",
                "title" : "func copy() -> Self",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/fffoundation\/copyable",
            "title" : "Copyable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/diffable\/contains(_:)",
                "title" : "func contains(Self) -> Bool",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/fffoundation\/diffable",
            "title" : "Diffable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/geometricvalue\/acos()",
                "title" : "func acos() -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/geometricvalue\/asin()",
                "title" : "func asin() -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/geometricvalue\/atan()",
                "title" : "func atan() -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/geometricvalue\/cos()",
                "title" : "func cos() -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/geometricvalue\/sin()",
                "title" : "func sin() -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/geometricvalue\/tan()",
                "title" : "func tan() -> Self",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/fffoundation\/geometricvalue",
            "title" : "GeometricValue",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/fffoundation\/codableuserdefaultsstorable\/set(to:forkey:)",
                        "title" : "func set(to: UserDefaults, forKey: String)",
                        "type" : "method"
                      }
                    ],
                    "title" : "CodableUserDefaultsStorable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/primitiveuserdefaultstorable\/set(to:forkey:)",
                "title" : "func set(to: UserDefaults, forKey: String)",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/fffoundation\/codableuserdefaultsstorable\/get(from:forkey:)",
                        "title" : "static func get(from: UserDefaults, forKey: String) -> Self?",
                        "type" : "method"
                      }
                    ],
                    "title" : "CodableUserDefaultsStorable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/primitiveuserdefaultstorable\/get(from:forkey:)",
                "title" : "static func get(from: UserDefaults, forKey: String) -> Self?",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/fffoundation\/primitiveuserdefaultstorable",
            "title" : "PrimitiveUserDefaultStorable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/togglable\/toggled",
                "title" : "var toggled: Self",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/fffoundation\/togglable\/toggle()-2menb",
                        "title" : "func toggle()",
                        "type" : "method"
                      }
                    ],
                    "title" : "Togglable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/togglable\/toggle()-6qpje",
                "title" : "func toggle()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/fffoundation\/togglable",
            "title" : "Togglable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/triangulatablepoint\/value",
                "title" : "Value",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/triangulatablepoint\/init(x:y:)",
                "title" : "init(x: Self.Value, y: Self.Value)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/triangulatablepoint\/x",
                "title" : "var x: Self.Value",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/triangulatablepoint\/y",
                "title" : "var y: Self.Value",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/fffoundation\/triangulatablepoint",
            "title" : "TriangulatablePoint",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/*(_:_:)",
                "title" : "static func * (Angle<Value>, Angle<Value>) -> Angle<Value>",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/*=(_:_:)",
                "title" : "static func *= (inout Angle<Value>, Angle<Value>)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/+(_:_:)",
                "title" : "static func + (Angle<Value>, Angle<Value>) -> Angle<Value>",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/+=(_:_:)-79ho2",
                "title" : "static func += (inout Angle<Value>, Angle<Value>)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/-(_:_:)",
                "title" : "static func - (Angle<Value>, Angle<Value>) -> Angle<Value>",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/-=(_:_:)-6unk4",
                "title" : "static func -= (inout Angle<Value>, Angle<Value>)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/\/(_:_:)",
                "title" : "static func \/ (Angle<Value>, Angle<Value>) -> Angle<Value>",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/\/=(_:_:)",
                "title" : "static func \/= (inout Angle<Value>, Angle<Value>)",
                "type" : "op"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/init(_:)-7wgb5",
                "title" : "init<Source>(Source)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/init(degrees:)",
                "title" : "init(degrees: Value)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/init(exactly:)-6emnj",
                "title" : "init?<Source>(exactly: Source)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/init(integerliteral:)",
                "title" : "init(integerLiteral: Angle<Value>.IntegerLiteralType)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/init(radians:)",
                "title" : "init(radians: Value)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/init(sign:exponent:significand:)",
                "title" : "init(sign: FloatingPointSign, exponent: Angle<Value>.Exponent, significand: Angle<Value>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/init(signof:magnitudeof:)-7j6mo",
                "title" : "init(signOf: Angle<Value>, magnitudeOf: Angle<Value>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/asdegrees",
                "title" : "var asDegrees: Angle<Value>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/asradians",
                "title" : "var asRadians: Angle<Value>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/exponent-swift.property",
                "title" : "var exponent: Angle<Value>.Exponent",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/iscanonical",
                "title" : "var isCanonical: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/isfinite",
                "title" : "var isFinite: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/isinfinite",
                "title" : "var isInfinite: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/isnan",
                "title" : "var isNaN: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/isnormal",
                "title" : "var isNormal: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/issignalingnan",
                "title" : "var isSignalingNaN: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/issubnormal",
                "title" : "var isSubnormal: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/iszero",
                "title" : "var isZero: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/magnitude-swift.property",
                "title" : "var magnitude: Angle<Value>.Magnitude",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/nextdown-7h7qr",
                "title" : "var nextDown: Angle<Value>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/nextup",
                "title" : "var nextUp: Angle<Value>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/sign",
                "title" : "var sign: FloatingPointSign",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/significand",
                "title" : "var significand: Angle<Value>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/ulp",
                "title" : "var ulp: Angle<Value>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/value",
                "title" : "var value: Value",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/addproduct(_:_:)",
                "title" : "func addProduct(Angle<Value>, Angle<Value>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/advanced(by:)",
                "title" : "func advanced(by: Angle<Value>.Stride) -> Angle<Value>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/convert()",
                "title" : "func convert()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/converted()",
                "title" : "func converted() -> Angle<Value>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/distance(to:)",
                "title" : "func distance(to: Angle<Value>) -> Angle<Value>.Stride",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/formremainder(dividingby:)",
                "title" : "func formRemainder(dividingBy: Angle<Value>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/formsquareroot()",
                "title" : "func formSquareRoot()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/formtruncatingremainder(dividingby:)",
                "title" : "func formTruncatingRemainder(dividingBy: Angle<Value>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/hash(into:)",
                "title" : "func hash(into: inout Hasher)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/isequal(to:)",
                "title" : "func isEqual(to: Angle<Value>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/isless(than:)",
                "title" : "func isLess(than: Angle<Value>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/islessthanorequalto(_:)",
                "title" : "func isLessThanOrEqualTo(Angle<Value>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/istotallyordered(beloworequalto:)",
                "title" : "func isTotallyOrdered(belowOrEqualTo: Angle<Value>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/round(_:)",
                "title" : "func round(FloatingPointRoundingRule)",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/exponent-swift.typealias",
                "title" : "Angle.Exponent",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/integerliteraltype",
                "title" : "Angle.IntegerLiteralType",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/magnitude-swift.typealias",
                "title" : "Angle.Magnitude",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/stride",
                "title" : "Angle.Stride",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/greatestfinitemagnitude",
                "title" : "static var greatestFiniteMagnitude: Angle<Value>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/infinity",
                "title" : "static var infinity: Angle<Value>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/leastnonzeromagnitude",
                "title" : "static var leastNonzeroMagnitude: Angle<Value>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/leastnormalmagnitude",
                "title" : "static var leastNormalMagnitude: Angle<Value>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/nan",
                "title" : "static var nan: Angle<Value>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/pi",
                "title" : "static var pi: Angle<Value>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/radix-62xbh",
                "title" : "static var radix: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/signalingnan",
                "title" : "static var signalingNaN: Angle<Value>",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/degrees(_:)",
                "title" : "static func degrees(Value) -> Angle<Value>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/angle\/radians(_:)",
                "title" : "static func radians(Value) -> Angle<Value>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/+(_:)",
                    "title" : "static func + (Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/+=(_:_:)-4zt3k",
                    "title" : "static func += (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/-=(_:_:)-5tlyn",
                    "title" : "static func -= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/zero",
                    "title" : "static var zero: Self",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/angle\/additivearithmetic-implementations",
                "title" : "AdditiveArithmetic Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/init(_:)-5t5aa",
                    "title" : "init<Source>(Source)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/init(_:format:lenient:)-3m74h",
                    "title" : "init(String, format: FloatingPointFormatStyle<Self>, lenient: Bool) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/init(_:format:lenient:)-3r1yu",
                    "title" : "init(String, format: FloatingPointFormatStyle<Self>.Percent, lenient: Bool) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/init(_:format:lenient:)-98iqs",
                    "title" : "init(String, format: FloatingPointFormatStyle<Self>.Currency, lenient: Bool) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/init(_:strategy:)-6num6",
                    "title" : "init<S>(S.ParseInput, strategy: S) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/init(_:strategy:)-80vot",
                    "title" : "init<S>(S.ParseInput, strategy: S) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/init(exactly:)-455qs",
                    "title" : "init?<Source>(exactly: Source)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/init(sign:exponentbitpattern:significandbitpattern:)",
                    "title" : "init(sign: FloatingPointSign, exponentBitPattern: Angle<Value>.RawExponent, significandBitPattern: Angle<Value>.RawSignificand)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/binade",
                    "title" : "var binade: Angle<Value>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/exponentbitpattern",
                    "title" : "var exponentBitPattern: Angle<Value>.RawExponent",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/significandbitpattern",
                    "title" : "var significandBitPattern: Angle<Value>.RawSignificand",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/significandwidth",
                    "title" : "var significandWidth: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/formatted()",
                    "title" : "func formatted() -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/formatted(_:)-32r4t",
                    "title" : "func formatted<S>(S) -> S.FormatOutput",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/formatted(_:)-7s7pr",
                    "title" : "func formatted<S>(S) -> S.FormatOutput",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/rawexponent",
                    "title" : "Angle.RawExponent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/rawsignificand",
                    "title" : "Angle.RawSignificand",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/exponentbitcount",
                    "title" : "static var exponentBitCount: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/significandbitcount",
                    "title" : "static var significandBitCount: Int",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/angle\/binaryfloatingpoint-implementations",
                "title" : "BinaryFloatingPoint Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/'...(_:)-4lq4i",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/'...(_:)-72d04",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/_(_:_:)-2vo6",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/_(_:_:)-3iaps",
                    "title" : "static func < (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/_(_:_:)-9x37y",
                    "title" : "static func < (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/_(_:_:)-ufer",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/_=(_:_:)-1n7lb",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/_=(_:_:)-5850s",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/_=(_:_:)-8y098",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/_=(_:_:)-90fqg",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/angle\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/halfwidthcornerquoted",
                    "title" : "var halfWidthCornerQuoted: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/angle\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/angle\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/angle\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/==(_:_:)-39gnm",
                    "title" : "static func == (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/==(_:_:)-4sbur",
                    "title" : "static func == (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/angle\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/init(floatliteral:)",
                    "title" : "init(floatLiteral: Angle<Value>.FloatLiteralType)",
                    "type" : "init"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/floatliteraltype",
                    "title" : "Angle.FloatLiteralType",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/angle\/expressiblebyfloatliteral-implementations",
                "title" : "ExpressibleByFloatLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/init(signof:magnitudeof:)-692mg",
                    "title" : "init(signOf: Self, magnitudeOf: Self)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/floatingpointclass",
                    "title" : "var floatingPointClass: FloatingPointClassification",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/nextdown-tvel",
                    "title" : "var nextDown: Self",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/addingproduct(_:_:)",
                    "title" : "func addingProduct(Self, Self) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/remainder(dividingby:)",
                    "title" : "func remainder(dividingBy: Self) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/round()",
                    "title" : "func round()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/rounded()",
                    "title" : "func rounded() -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/rounded(_:)",
                    "title" : "func rounded(FloatingPointRoundingRule) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/squareroot()",
                    "title" : "func squareRoot() -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/truncatingremainder(dividingby:)",
                    "title" : "func truncatingRemainder(dividingBy: Self) -> Self",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/radix-kunf",
                    "title" : "static var radix: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/ulpofone",
                    "title" : "static var ulpOfOne: Self",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/maximum(_:_:)",
                    "title" : "static func maximum(Self, Self) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/maximummagnitude(_:_:)",
                    "title" : "static func maximumMagnitude(Self, Self) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/minimum(_:_:)",
                    "title" : "static func minimum(Self, Self) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/minimummagnitude(_:_:)",
                    "title" : "static func minimumMagnitude(Self, Self) -> Self",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/angle\/floatingpoint-implementations",
                "title" : "FloatingPoint Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/-(_:)",
                    "title" : "static func - (Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/angle\/negate()",
                    "title" : "func negate()",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/angle\/signednumeric-implementations",
                "title" : "SignedNumeric Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/fffoundation\/angle",
            "title" : "Angle",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/cow\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/cow\/init(copyingwith:)",
                "title" : "init(copyingWith: CoW<Value>.Copier)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/cow\/init(wrappedvalue:)",
                "title" : "init(wrappedValue: Value)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/cow\/init(wrappedvalue:copyingwith:)",
                "title" : "init(wrappedValue: Value, copyingWith: CoW<Value>.Copier)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/cow\/wrappedvalue",
                "title" : "var wrappedValue: Value",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/cow\/copyifneeded()",
                "title" : "func copyIfNeeded()",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/cow\/copier",
                "title" : "CoW.Copier",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cow\/'...(_:)-6s441",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cow\/'...(_:)-cxkm",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cow\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cow\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cow\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cow\/_(_:_:)-3uzgd",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cow\/_(_:_:)-9w2cd",
                    "title" : "static func < (CoW<Value>, CoW<Value>) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cow\/_=(_:_:)-2siee",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cow\/_=(_:_:)-505vs",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/cow\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cow\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/cow\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cow\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/cow\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cow\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cow\/==(_:_:)",
                    "title" : "static func == (CoW<Value>, CoW<Value>) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/cow\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cow\/init(booleanliteral:)",
                    "title" : "init(booleanLiteral: Value.BooleanLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/cow\/expressiblebybooleanliteral-implementations",
                "title" : "ExpressibleByBooleanLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cow\/init(extendedgraphemeclusterliteral:)",
                    "title" : "init(extendedGraphemeClusterLiteral: Value.ExtendedGraphemeClusterLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/cow\/expressiblebyextendedgraphemeclusterliteral-implementations",
                "title" : "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cow\/init(floatliteral:)",
                    "title" : "init(floatLiteral: Value.FloatLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/cow\/expressiblebyfloatliteral-implementations",
                "title" : "ExpressibleByFloatLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cow\/init(integerliteral:)",
                    "title" : "init(integerLiteral: Value.IntegerLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/cow\/expressiblebyintegerliteral-implementations",
                "title" : "ExpressibleByIntegerLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cow\/init(nilliteral:)",
                    "title" : "init(nilLiteral: ())",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/cow\/expressiblebynilliteral-implementations",
                "title" : "ExpressibleByNilLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cow\/init(stringinterpolation:)",
                    "title" : "init(stringInterpolation: Value.StringInterpolation)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/cow\/expressiblebystringinterpolation-implementations",
                "title" : "ExpressibleByStringInterpolation Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cow\/init(stringliteral:)",
                    "title" : "init(stringLiteral: Value.StringLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/cow\/expressiblebystringliteral-implementations",
                "title" : "ExpressibleByStringLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cow\/init(unicodescalarliteral:)",
                    "title" : "init(unicodeScalarLiteral: Value.UnicodeScalarLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/cow\/expressiblebyunicodescalarliteral-implementations",
                "title" : "ExpressibleByUnicodeScalarLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cow\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/cow\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/fffoundation\/cow",
            "title" : "CoW",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/diff\/init(base:comparedto:)-7fkd7",
                "title" : "init(base: String, comparedTo: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/diff\/init(base:comparedto:)-9hpc9",
                "title" : "init(base: String, comparedTo: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/diff\/init(base:comparedto:splitby:)-88siw",
                "title" : "init(base: Subject, comparedTo: Subject, splitBy: Subject.Element)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/diff\/init(base:comparedto:splitby:)-rrip",
                "title" : "init(base: Subject, comparedTo: Subject, splitBy: Subject.Element)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/diff\/base",
                "title" : "let base: Subject",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/diff\/changes-swift.property",
                "title" : "let changes: Diff<Subject, Element>.Changes",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/diff\/head",
                "title" : "let head: Subject",
                "type" : "property"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/diff\/changes-swift.typealias",
                "title" : "Diff.Changes",
                "type" : "typealias"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/diff\/change\/added",
                    "title" : "case added",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/diff\/change\/removed",
                    "title" : "case removed",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/diff\/change\/unchanged",
                    "title" : "case unchanged",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/diff\/change\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/diff\/change\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/diff\/change\/linesign",
                    "title" : "var lineSign: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/diff\/change\/annotatedline(for:)",
                    "title" : "func annotatedLine(for: Element) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/diff\/change\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/diff\/change\/halfwidthcornerquoted",
                        "title" : "var halfWidthCornerQuoted: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/fffoundation\/diff\/change\/customstringconvertible-implementations",
                    "title" : "CustomStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/diff\/change\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/fffoundation\/diff\/change\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/diff\/change",
                "title" : "Diff.Change",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/diff\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/diff\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/diff\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/diff\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/fffoundation\/diff",
            "title" : "Diff",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/lazy\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/lazy\/init(constructor:)",
                "title" : "init(constructor: () -> Deferred)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/lazy\/init(other:)",
                "title" : "init(other: Lazy<Deferred>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/lazy\/init(wrappedvalue:)",
                "title" : "init(wrappedValue: () -> Deferred)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/lazy\/wrappedvalue",
                "title" : "var wrappedValue: Deferred",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/lazy\/reset()",
                "title" : "func reset()",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/lazy\/'...(_:)-1cqnz",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/lazy\/'...(_:)-4as9u",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/lazy\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/lazy\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/lazy\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/lazy\/_(_:_:)-1tcbb",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/lazy\/_(_:_:)-h05i",
                    "title" : "static func < (Lazy<Deferred>, Lazy<Deferred>) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/lazy\/_=(_:_:)-2t9no",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/lazy\/_=(_:_:)-9lgno",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/lazy\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/lazy\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/lazy\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/lazy\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/lazy\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/lazy\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/lazy\/==(_:_:)",
                    "title" : "static func == (Lazy<Deferred>, Lazy<Deferred>) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/lazy\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/lazy\/init(booleanliteral:)",
                    "title" : "init(booleanLiteral: Deferred.BooleanLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/lazy\/expressiblebybooleanliteral-implementations",
                "title" : "ExpressibleByBooleanLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/lazy\/init(extendedgraphemeclusterliteral:)",
                    "title" : "init(extendedGraphemeClusterLiteral: Deferred.ExtendedGraphemeClusterLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/lazy\/expressiblebyextendedgraphemeclusterliteral-implementations",
                "title" : "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/lazy\/init(floatliteral:)",
                    "title" : "init(floatLiteral: Deferred.FloatLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/lazy\/expressiblebyfloatliteral-implementations",
                "title" : "ExpressibleByFloatLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/lazy\/init(integerliteral:)",
                    "title" : "init(integerLiteral: Deferred.IntegerLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/lazy\/expressiblebyintegerliteral-implementations",
                "title" : "ExpressibleByIntegerLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/lazy\/init(nilliteral:)",
                    "title" : "init(nilLiteral: ())",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/lazy\/expressiblebynilliteral-implementations",
                "title" : "ExpressibleByNilLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/lazy\/init(stringinterpolation:)",
                    "title" : "init(stringInterpolation: Deferred.StringInterpolation)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/lazy\/expressiblebystringinterpolation-implementations",
                "title" : "ExpressibleByStringInterpolation Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/lazy\/init(stringliteral:)",
                    "title" : "init(stringLiteral: Deferred.StringLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/lazy\/expressiblebystringliteral-implementations",
                "title" : "ExpressibleByStringLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/lazy\/init(unicodescalarliteral:)",
                    "title" : "init(unicodeScalarLiteral: Deferred.UnicodeScalarLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/lazy\/expressiblebyunicodescalarliteral-implementations",
                "title" : "ExpressibleByUnicodeScalarLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/lazy\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/lazy\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/fffoundation\/lazy",
            "title" : "Lazy",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/lens\/init(getter:setter:)",
                "title" : "init(getter: () -> Value, setter: (Value) -> ())",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/lens\/binding",
                "title" : "var binding: Binding<Value>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/lens\/wrappedvalue",
                "title" : "var wrappedValue: Value",
                "type" : "property"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/lens\/subscript(dynamicmember:)",
                "title" : "subscript<T>(dynamicMember _: WritableKeyPath<Value, T>) -> Lens<T>",
                "type" : "subscript"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/lens\/constant(_:)",
                "title" : "static func constant(Value) -> Lens<Value>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/fffoundation\/lens\/readonly(getter:)",
                "title" : "static func readOnly(getter: () -> Value) -> Lens<Value>",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/fffoundation\/lens",
            "title" : "Lens",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/point\/init(x:y:)",
                "title" : "init(x: Value, y: Value)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/point\/x",
                "title" : "var x: Value",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/point\/y",
                "title" : "var y: Value",
                "type" : "property"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/point\/zero",
                "title" : "static var zero: Point<Value>",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/point\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/point\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/point\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/point\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/fffoundation\/point",
            "title" : "Point",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/propertykey\/init(_:)",
                "title" : "init(PropertyKey.RawValue)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/propertykey\/init(rawvalue:)",
                "title" : "init(rawValue: PropertyKey.RawValue)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/propertykey\/init(stringliteral:)",
                "title" : "init(stringLiteral: PropertyKey.StringLiteralType)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/propertykey\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/propertykey\/rawvalue-swift.property",
                "title" : "let rawValue: PropertyKey.RawValue",
                "type" : "property"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/propertykey\/rawvalue-swift.typealias",
                "title" : "PropertyKey.RawValue",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/fffoundation\/propertykey\/stringliteraltype",
                "title" : "PropertyKey.StringLiteralType",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/propertykey\/halfwidthcornerquoted",
                    "title" : "var halfWidthCornerQuoted: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/propertykey\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/propertykey\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/propertykey\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/propertykey\/init(extendedgraphemeclusterliteral:)",
                    "title" : "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/propertykey\/expressiblebyextendedgraphemeclusterliteral-implementations",
                "title" : "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/propertykey\/init(unicodescalarliteral:)",
                    "title" : "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/propertykey\/expressiblebyunicodescalarliteral-implementations",
                "title" : "ExpressibleByUnicodeScalarLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/propertykey\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/propertykey\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/propertykey\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/propertykey\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/propertykey\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/fffoundation\/propertykey",
            "title" : "PropertyKey",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/size\/init(width:height:)",
                "title" : "init(width: Value, height: Value)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/size\/center-1xos6",
                "title" : "var center: Point<Value>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/size\/center-vel1",
                "title" : "var center: Point<Value>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/size\/height",
                "title" : "var height: Value",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/size\/issquare",
                "title" : "var isSquare: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/size\/width",
                "title" : "var width: Value",
                "type" : "property"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/size\/zero",
                "title" : "static var zero: Size<Value>",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/size\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/size\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/size\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/size\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/fffoundation\/size",
            "title" : "Size",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/triangle\/==(_:_:)",
                "title" : "static func == (Triangle<Point>, Triangle<Point>) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/triangle\/init(a:b:c:)",
                "title" : "init(a: Point, b: Point, c: Point)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/triangle\/init(orthogonallyoncwitha:b:)",
                "title" : "init(orthogonallyOnCWithA: Point, b: Point)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/triangle\/_-2jn26",
                "title" : "var γ: Triangle<Point>.Angle",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/triangle\/_-96pkw",
                "title" : "var α: Triangle<Point>.Angle",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/triangle\/_-9v2bo",
                "title" : "var β: Triangle<Point>.Angle",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/triangle\/a",
                "title" : "var a: Triangle<Point>.Distance",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/triangle\/angles",
                "title" : "let angles: (α: Triangle<Point>.Angle, β: Triangle<Point>.Angle, γ: Triangle<Point>.Angle)",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/triangle\/b",
                "title" : "var b: Triangle<Point>.Distance",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/triangle\/c",
                "title" : "var c: Triangle<Point>.Distance",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/triangle\/pointa",
                "title" : "var pointA: Point",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/triangle\/pointb",
                "title" : "var pointB: Point",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/triangle\/pointc",
                "title" : "var pointC: Point",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/triangle\/points",
                "title" : "let points: (a: Point, b: Point, c: Point)",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/triangle\/sides",
                "title" : "let sides: (a: Triangle<Point>.Distance, b: Triangle<Point>.Distance, c: Triangle<Point>.Distance)",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/triangle\/hash(into:)",
                "title" : "func hash(into: inout Hasher)",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/triangle\/angle",
                "title" : "Triangle.Angle",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/fffoundation\/triangle\/distance",
                "title" : "Triangle.Distance",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/triangle\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/triangle\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/fffoundation\/triangle",
            "title" : "Triangle",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/typedescription\/init(_:)",
                "title" : "init<T>(T.Type)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/typedescription\/init(any:)",
                "title" : "init(any: Any.Type)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/typedescription\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/typedescription\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/typedescription\/genericparameters",
                "title" : "var genericParameters: Array<TypeDescription>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/typedescription\/isgeneric",
                "title" : "var isGeneric: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/typedescription\/name",
                "title" : "let name: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/typedescription\/typename(includingmodule:)",
                "title" : "func typeName(includingModule: Bool) -> String",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/typedescription\/halfwidthcornerquoted",
                    "title" : "var halfWidthCornerQuoted: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/typedescription\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/typedescription\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/typedescription\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/fffoundation\/typedescription",
            "title" : "TypeDescription",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Classes",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/receive(subscriber:)",
                    "title" : "func receive<S>(subscriber: S)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/failure",
                    "title" : "UserDefault.Publisher.Failure",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/output",
                    "title" : "UserDefault.Publisher.Output",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/values-5akv3",
                        "title" : "var values: AsyncPublisher<Self>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/values-bnlo",
                        "title" : "var values: AsyncThrowingPublisher<Self>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/allsatisfy(_:)",
                        "title" : "func allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/append(_:)",
                        "title" : "func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/assertnofailure(_:file:line:)",
                        "title" : "func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/assign(to:)",
                        "title" : "func assign(to: inout Published<Self.Output>.Publisher)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/assign(to:on:)",
                        "title" : "func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/breakpoint(receivesubscription:receiveoutput:receivecompletion:)",
                        "title" : "func breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/breakpointonerror()",
                        "title" : "func breakpointOnError() -> Publishers.Breakpoint<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/buffer(size:prefetch:whenfull:)",
                        "title" : "func buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/catch(_:)",
                        "title" : "func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/collect()",
                        "title" : "func collect() -> Publishers.Collect<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/collect(_:)",
                        "title" : "func collect(Int) -> Publishers.CollectByCount<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/collect(_:options:)",
                        "title" : "func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/combinelatest(_:)",
                        "title" : "func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/combinelatest(_:_:)-3c11w",
                        "title" : "func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/combinelatest(_:_:)-9m3g5",
                        "title" : "func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/combinelatest(_:_:_:)-15ycy",
                        "title" : "func combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/combinelatest(_:_:_:)-fdcg",
                        "title" : "func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/combinelatest(_:_:_:_:)",
                        "title" : "func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/compactmap(_:)",
                        "title" : "func compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/contains(_:)",
                        "title" : "func contains(Self.Output) -> Publishers.Contains<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/contains(where:)",
                        "title" : "func contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/count()",
                        "title" : "func count() -> Publishers.Count<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/debounce(for:scheduler:options:)",
                        "title" : "func debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/decode(type:decoder:)",
                        "title" : "func decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/delay(for:tolerance:scheduler:options:)",
                        "title" : "func delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/drop(untiloutputfrom:)",
                        "title" : "func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/drop(while:)",
                        "title" : "func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/dropfirst(_:)",
                        "title" : "func dropFirst(Int) -> Publishers.Drop<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/encode(encoder:)",
                        "title" : "func encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/erasetoanypublisher()",
                        "title" : "func eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/filter(_:)",
                        "title" : "func filter((Self.Output) -> Bool) -> Publishers.Filter<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/first()",
                        "title" : "func first() -> Publishers.First<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/first(where:)",
                        "title" : "func first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/flatmap(maxpublishers:_:)-1qe4p",
                        "title" : "func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/flatmap(maxpublishers:_:)-2qu69",
                        "title" : "func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/flatmap(maxpublishers:_:)-2r8ow",
                        "title" : "func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/flatmap(maxpublishers:_:)-4xc7v",
                        "title" : "func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)",
                        "title" : "func handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/ignoreoutput()",
                        "title" : "func ignoreOutput() -> Publishers.IgnoreOutput<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/last()",
                        "title" : "func last() -> Publishers.Last<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/last(where:)",
                        "title" : "func last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/makeconnectable()",
                        "title" : "func makeConnectable() -> Publishers.MakeConnectable<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/map(_:)-1ewlj",
                        "title" : "func map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/map(_:)-2r04p",
                        "title" : "func map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/map(_:_:)",
                        "title" : "func map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/map(_:_:_:)",
                        "title" : "func map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/maperror(_:)",
                        "title" : "func mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/max()",
                        "title" : "func max() -> Publishers.Comparison<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/max(by:)",
                        "title" : "func max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/measureinterval(using:options:)",
                        "title" : "func measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/merge(with:)",
                        "title" : "func merge(with: Self) -> Publishers.MergeMany<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/merge(with:_:)",
                        "title" : "func merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/merge(with:_:_:)",
                        "title" : "func merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/merge(with:_:_:_:)",
                        "title" : "func merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/merge(with:_:_:_:_:)",
                        "title" : "func merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/merge(with:_:_:_:_:_:)",
                        "title" : "func merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/merge(with:_:_:_:_:_:_:)",
                        "title" : "func merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/min()",
                        "title" : "func min() -> Publishers.Comparison<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/min(by:)",
                        "title" : "func min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/multicast(_:)",
                        "title" : "func multicast<S>(() -> S) -> Publishers.Multicast<Self, S>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/multicast(subject:)",
                        "title" : "func multicast<S>(subject: S) -> Publishers.Multicast<Self, S>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/output(at:)",
                        "title" : "func output(at: Int) -> Publishers.Output<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/output(in:)",
                        "title" : "func output<R>(in: R) -> Publishers.Output<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/prefix(_:)",
                        "title" : "func prefix(Int) -> Publishers.Output<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/prefix(untiloutputfrom:)",
                        "title" : "func prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/prefix(while:)",
                        "title" : "func prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/prepend(_:)",
                        "title" : "func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/print(_:to:)",
                        "title" : "func print(String, to: TextOutputStream?) -> Publishers.Print<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/receive(on:options:)",
                        "title" : "func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/reduce(_:_:)",
                        "title" : "func reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/removeduplicates()",
                        "title" : "func removeDuplicates() -> Publishers.RemoveDuplicates<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/removeduplicates(by:)",
                        "title" : "func removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/replaceempty(with:)",
                        "title" : "func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/replaceerror(with:)",
                        "title" : "func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/replacenil(with:)",
                        "title" : "func replaceNil<T>(with: T) -> Publishers.Map<Self, T>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/retry(_:)",
                        "title" : "func retry(Int) -> Publishers.Retry<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/scan(_:_:)",
                        "title" : "func scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/setfailuretype(to:)",
                        "title" : "func setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/share()",
                        "title" : "func share() -> Publishers.Share<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/sink(receivecompletion:receivevalue:)",
                        "title" : "func sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/sink(receivevalue:)",
                        "title" : "func sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/subscribe(_:)-11d00",
                        "title" : "func subscribe<S>(S) -> AnyCancellable",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/subscribe(_:)-2uznw",
                        "title" : "func subscribe<S>(S)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/subscribe(on:options:)",
                        "title" : "func subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/switchtolatest()",
                        "title" : "func switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/throttle(for:scheduler:latest:)",
                        "title" : "func throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/timeout(_:scheduler:options:customerror:)",
                        "title" : "func timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/tryallsatisfy(_:)",
                        "title" : "func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/trycatch(_:)",
                        "title" : "func tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/trycompactmap(_:)",
                        "title" : "func tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/trycontains(where:)",
                        "title" : "func tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/trydrop(while:)",
                        "title" : "func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/tryfilter(_:)",
                        "title" : "func tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/tryfirst(where:)",
                        "title" : "func tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/trylast(where:)",
                        "title" : "func tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/trymap(_:)",
                        "title" : "func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/trymax(by:)",
                        "title" : "func tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/trymin(by:)",
                        "title" : "func tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/tryprefix(while:)",
                        "title" : "func tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/tryreduce(_:_:)",
                        "title" : "func tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/tryremoveduplicates(by:)",
                        "title" : "func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/tryscan(_:_:)",
                        "title" : "func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/zip(_:)",
                        "title" : "func zip<P>(P) -> Publishers.Zip<Self, P>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/zip(_:_:)-8fb30",
                        "title" : "func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/zip(_:_:)-8ulcl",
                        "title" : "func zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/zip(_:_:_:)-1og57",
                        "title" : "func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/zip(_:_:_:)-d2p",
                        "title" : "func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/zip(_:_:_:_:)",
                        "title" : "func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class\/publisher-implementations",
                    "title" : "Publisher Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.class",
                "title" : "UserDefault.Publisher",
                "type" : "class"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/userdefault\/init(userdefaults:key:)-12xia",
                "title" : "init(userDefaults: UserDefaults, key: UserDefaultKey)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/userdefault\/init(userdefaults:key:)-1x9sa",
                "title" : "init(userDefaults: UserDefaults, key: UserDefaultKey)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/userdefault\/init(userdefaults:key:)-76rmt",
                "title" : "init(userDefaults: UserDefaults, key: UserDefaultKey)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/userdefault\/init(userdefaults:key:)-7zvqv",
                "title" : "init(userDefaults: UserDefaults, key: UserDefaultKey)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/userdefault\/init(userdefaults:key:)-86asg",
                "title" : "init(userDefaults: UserDefaults, key: UserDefaultKey)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/userdefault\/init(userdefaults:key:defaultvalue:)",
                "title" : "init(userDefaults: UserDefaults, key: UserDefaultKey, defaultValue: () -> Value)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/userdefault\/init(wrappedvalue:userdefaults:key:)",
                "title" : "init(wrappedValue: () -> Value, userDefaults: UserDefaults, key: UserDefaultKey)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/userdefault\/binding",
                "title" : "var binding: Binding<Value>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/userdefault\/defaultvalue",
                "title" : "var defaultValue: Value",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/userdefault\/key",
                "title" : "let key: UserDefaultKey",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/userdefault\/projectedvalue",
                "title" : "var projectedValue: Lens<Value>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/userdefault\/publisher-swift.property",
                "title" : "var publisher: UserDefault<Value>.Publisher",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/userdefault\/userdefaults",
                "title" : "let userDefaults: UserDefaults",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/userdefault\/wrappedvalue",
                "title" : "var wrappedValue: Value",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/userdefault\/delete()",
                "title" : "func delete()",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/userdefault\/update()",
                    "title" : "func update()",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/userdefault\/dynamicproperty-implementations",
                "title" : "DynamicProperty Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/fffoundation\/userdefault",
            "title" : "UserDefault",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/userdefaultkey\/init(rawvalue:)",
                "title" : "init(rawValue: UserDefaultKey.RawValue)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/userdefaultkey\/init(stringliteral:)",
                "title" : "init(stringLiteral: UserDefaultKey.StringLiteralType)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/userdefaultkey\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/userdefaultkey\/rawvalue-swift.property",
                "title" : "let rawValue: UserDefaultKey.RawValue",
                "type" : "property"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/userdefaultkey\/rawvalue-swift.typealias",
                "title" : "UserDefaultKey.RawValue",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/fffoundation\/userdefaultkey\/stringliteraltype",
                "title" : "UserDefaultKey.StringLiteralType",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/userdefaultkey\/halfwidthcornerquoted",
                    "title" : "var halfWidthCornerQuoted: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/userdefaultkey\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/userdefaultkey\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/userdefaultkey\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/userdefaultkey\/init(extendedgraphemeclusterliteral:)",
                    "title" : "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/userdefaultkey\/expressiblebyextendedgraphemeclusterliteral-implementations",
                "title" : "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/userdefaultkey\/init(unicodescalarliteral:)",
                    "title" : "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/userdefaultkey\/expressiblebyunicodescalarliteral-implementations",
                "title" : "ExpressibleByUnicodeScalarLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/userdefaultkey\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/userdefaultkey\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/userdefaultkey\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/userdefaultkey\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/userdefaultkey\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/fffoundation\/userdefaultkey",
            "title" : "UserDefaultKey",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/weak\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/weak\/init(object:)",
                "title" : "init(object: Object)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/fffoundation\/weak\/init(wrappedvalue:)",
                "title" : "init(wrappedValue: Object?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/weak\/wasreleased",
                "title" : "var wasReleased: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/fffoundation\/weak\/wrappedvalue",
                "title" : "var wrappedValue: Object?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/weak\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/weak\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/weak\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/weak\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/weak\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/weak\/==(_:_:)",
                    "title" : "static func == (Weak<Object>, Weak<Object>) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/weak\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/weak\/init(booleanliteral:)",
                    "title" : "init(booleanLiteral: Object.BooleanLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/weak\/expressiblebybooleanliteral-implementations",
                "title" : "ExpressibleByBooleanLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/weak\/init(extendedgraphemeclusterliteral:)",
                    "title" : "init(extendedGraphemeClusterLiteral: Object.ExtendedGraphemeClusterLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/weak\/expressiblebyextendedgraphemeclusterliteral-implementations",
                "title" : "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/weak\/init(floatliteral:)",
                    "title" : "init(floatLiteral: Object.FloatLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/weak\/expressiblebyfloatliteral-implementations",
                "title" : "ExpressibleByFloatLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/weak\/init(integerliteral:)",
                    "title" : "init(integerLiteral: Object.IntegerLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/weak\/expressiblebyintegerliteral-implementations",
                "title" : "ExpressibleByIntegerLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/weak\/init(nilliteral:)",
                    "title" : "init(nilLiteral: ())",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/weak\/expressiblebynilliteral-implementations",
                "title" : "ExpressibleByNilLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/weak\/init(stringinterpolation:)",
                    "title" : "init(stringInterpolation: Object.StringInterpolation)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/weak\/expressiblebystringinterpolation-implementations",
                "title" : "ExpressibleByStringInterpolation Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/weak\/init(stringliteral:)",
                    "title" : "init(stringLiteral: Object.StringLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/weak\/expressiblebystringliteral-implementations",
                "title" : "ExpressibleByStringLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/weak\/init(unicodescalarliteral:)",
                    "title" : "init(unicodeScalarLiteral: Object.UnicodeScalarLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/weak\/expressiblebyunicodescalarliteral-implementations",
                "title" : "ExpressibleByUnicodeScalarLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/weak\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/weak\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/fffoundation\/weak",
            "title" : "Weak",
            "type" : "struct"
          },
          {
            "title" : "Operators",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/fffoundation\/!(_:)-4ense",
            "title" : "func ! (NSPredicate) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!(_:)-8kbms",
            "title" : "func ! <Root>(KeyPath<Root, Bool>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!(_:)-8z5ka",
            "title" : "func ! (NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-172mi",
            "title" : "func != <Root, Value>(Value?, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-17tc7",
            "title" : "func != <Value>(Value?, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-1iwlt",
            "title" : "func != <Value>(NSPredicate.Key, Value?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-1mfy2",
            "title" : "func != <Value>(Value?, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-28mdo",
            "title" : "func != <Root, Value>(Value?, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-2996c",
            "title" : "func != <Value>(Value?, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-2ml1h",
            "title" : "func != <Root, Value>(Value?, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-2myhw",
            "title" : "func != <Value>(NSPredicate.Key, Value?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-31yek",
            "title" : "func != (NSPredicate.Key, Bool?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-38p4a",
            "title" : "func != (NSNumber?, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-3gpz",
            "title" : "func != <Root, Value>(KeyPath<Root, Value>, Value?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-3oagn",
            "title" : "func != <Root, Value>(Value?, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-3sk5x",
            "title" : "func != <Root>(KeyPath<Root, NSNumber>, NSNumber?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-3ves0",
            "title" : "func != <Root, Value>(KeyPath<Root, Value>, Value?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-4dy0n",
            "title" : "func != <Root>(NSNumber?, KeyPath<Root, NSNumber>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-4e3rx",
            "title" : "func != <Value>(Value?, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-4f77o",
            "title" : "func != (Bool?, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-4q81a",
            "title" : "func != <Root, Value>(KeyPath<Root, Value>, Value?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-4ty0q",
            "title" : "func != <Root>(Bool?, KeyPath<Root, Bool>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-5krof",
            "title" : "func != <Value>(NSPredicate.Key, Value?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-608ur",
            "title" : "func != <Value>(Value?, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-6sayw",
            "title" : "func != <Root, Value>(KeyPath<Root, Value>, Value?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-74oiy",
            "title" : "func != (NSPredicate.Key, NSNumber?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-7fxqg",
            "title" : "func != <Value>(NSPredicate.Key, Value?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-7xrxw",
            "title" : "func != <Root>(KeyPath<Root, Bool>, Bool?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-80uv1",
            "title" : "func != <Root, Value>(Value?, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-8x1bp",
            "title" : "func != <Root, Value>(KeyPath<Root, Value>, Value?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!=(_:_:)-9c6d2",
            "title" : "func != <Value>(NSPredicate.Key, Value?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!_(_:)-7pzh2",
            "title" : "func !^ (NSSortDescriptor.Key) -> NSSortDescriptor",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/!_(_:)-8nc5v",
            "title" : "func !^ <Root, Value>(KeyPath<Root, Value>) -> NSSortDescriptor",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/&&(_:_:)",
            "title" : "func && (NSPredicate, NSPredicate) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-1hy2o",
            "title" : "func == <Root, Value>(KeyPath<Root, Value>, Value?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-1lwrt",
            "title" : "func == <Value>(NSPredicate.Key, Value?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-1swyq",
            "title" : "func == <Root, Value>(KeyPath<Root, Value>, Value?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-1t066",
            "title" : "func == <Root, Value>(KeyPath<Root, Value>, Value?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-1thrk",
            "title" : "func == <Value>(NSPredicate.Key, Value?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-2cq49",
            "title" : "func == <Root>(NSNumber?, KeyPath<Root, NSNumber>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-2hke7",
            "title" : "func == <Root>(KeyPath<Root, NSNumber>, NSNumber?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-2ngt0",
            "title" : "func == (NSPredicate.Key, NSNumber?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-2t5la",
            "title" : "func == (Bool?, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-4hkbb",
            "title" : "func == <Value>(Value?, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-50con",
            "title" : "func == <Root, Value>(KeyPath<Root, Value>, Value?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-50vwo",
            "title" : "func == (NSNumber?, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-5veob",
            "title" : "func == <Value>(Value?, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-61b3d",
            "title" : "func == <Value>(NSPredicate.Key, Value?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-689l2",
            "title" : "func == <Value>(Value?, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-6upcc",
            "title" : "func == <Root, Value>(Value?, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-73hdv",
            "title" : "func == <Value>(Value?, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-7t9xc",
            "title" : "func == <Value>(NSPredicate.Key, Value?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-8kmnr",
            "title" : "func == <Root, Value>(KeyPath<Root, Value>, Value?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-962ul",
            "title" : "func == <Value>(Value?, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-96y8a",
            "title" : "func == <Value>(NSPredicate.Key, Value?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-9aa2u",
            "title" : "func == <Root>(KeyPath<Root, Bool>, Bool?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-9dsr6",
            "title" : "func == <Root, Value>(Value?, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-9fy1",
            "title" : "func == <Root>(Bool?, KeyPath<Root, Bool>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-9th46",
            "title" : "func == (NSPredicate.Key, Bool?) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-9xzc5",
            "title" : "func == <Root, Value>(Value?, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-c8w8",
            "title" : "func == <Root, Value>(Value?, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/==(_:_:)-vi2p",
            "title" : "func == <Root, Value>(Value?, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:)-19jm2",
            "title" : "func ^ (NSSortDescriptor.Key) -> NSSortDescriptor",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:)-4orlq",
            "title" : "func ^ <Root, Value>(KeyPath<Root, Value>) -> NSSortDescriptor",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-1aou3",
            "title" : "func < <Root, Value>(Value, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-1kv9g",
            "title" : "func < <Root, Value>(Value, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-1n2uy",
            "title" : "func > <Value>(Value, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-1ogzi",
            "title" : "func > <Value>(NSPredicate.Key, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-1tm5n",
            "title" : "func > <Root, Value>(KeyPath<Root, Value>, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-1wt6s",
            "title" : "func < <Root, Value>(Value, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-2o8aw",
            "title" : "func > (NSPredicate.Key, NSNumber) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-32adz",
            "title" : "func < (NSNumber, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-38e9c",
            "title" : "func < (NSPredicate.Key, NSNumber) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-39i5t",
            "title" : "func < <Root, Value>(KeyPath<Root, Value>, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-3appj",
            "title" : "func > <Value>(NSPredicate.Key, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-3dg1e",
            "title" : "func > <Value>(Value, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-3iv5x",
            "title" : "func > <Value>(NSPredicate.Key, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-3l3vb",
            "title" : "func < <Value>(Value, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-3lg67",
            "title" : "func < <Root, Value>(KeyPath<Root, Value>, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-3u1f0",
            "title" : "func > <Root, Value>(KeyPath<Root, Value>, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-46r",
            "title" : "func < <Root>(NSNumber, KeyPath<Root, NSNumber>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-49vrf",
            "title" : "func < <Value>(Value, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-4in6c",
            "title" : "func < <Value>(NSPredicate.Key, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-4mp4k",
            "title" : "func < <Value>(NSPredicate.Key, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-4s4tc",
            "title" : "func > <Root>(KeyPath<Root, NSNumber>, NSNumber) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-516bq",
            "title" : "func > <Root, Value>(Value, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-54klv",
            "title" : "func > <Root, Value>(KeyPath<Root, Value>, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-5e5mb",
            "title" : "func > <Value>(Value, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-5lmex",
            "title" : "func < <Value>(Value, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-61d56",
            "title" : "func > <Value>(Value, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-64nqp",
            "title" : "func < <Root, Value>(Value, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-6lzfq",
            "title" : "func < <Root>(KeyPath<Root, NSNumber>, NSNumber) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-6mkes",
            "title" : "func > <Root, Value>(Value, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-6njh",
            "title" : "func > <Root, Value>(Value, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-6oqev",
            "title" : "func < <Root, Value>(KeyPath<Root, Value>, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-6vd2e",
            "title" : "func < <Value>(NSPredicate.Key, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-78lh2",
            "title" : "func > <Root, Value>(KeyPath<Root, Value>, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-7g12g",
            "title" : "func > <Root, Value>(KeyPath<Root, Value>, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-7hacq",
            "title" : "func < <Value>(Value, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-7qsl7",
            "title" : "func > <Value>(NSPredicate.Key, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-7tave",
            "title" : "func < <Root, Value>(KeyPath<Root, Value>, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-8c4hc",
            "title" : "func > <Root>(NSNumber, KeyPath<Root, NSNumber>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-8jv25",
            "title" : "func < <Root, Value>(Value, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-8q7zp",
            "title" : "func > <Value>(Value, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-8wfn",
            "title" : "func < <Root, Value>(KeyPath<Root, Value>, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-90grb",
            "title" : "func > <Root, Value>(Value, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-93lur",
            "title" : "func > <Value>(NSPredicate.Key, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-9e119",
            "title" : "func < <Value>(NSPredicate.Key, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-9j83y",
            "title" : "func > <Root, Value>(Value, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-fhxh",
            "title" : "func < <Value>(Value, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-w2mg",
            "title" : "func < <Value>(NSPredicate.Key, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_(_:_:)-yjyo",
            "title" : "func > (NSNumber, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-1622d",
            "title" : "func >= <Root, Value>(KeyPath<Root, Value>, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-19zn8",
            "title" : "func <= <Value>(NSPredicate.Key, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-1a70b",
            "title" : "func <= <Root>(KeyPath<Root, NSNumber>, NSNumber) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-1cwf2",
            "title" : "func >= <Value>(NSPredicate.Key, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-1jike",
            "title" : "func <= (NSNumber, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-22bo9",
            "title" : "func >= <Value>(Value, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-231i0",
            "title" : "func <= <Root>(NSNumber, KeyPath<Root, NSNumber>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-25lhz",
            "title" : "func >= <Root, Value>(Value, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-266nr",
            "title" : "func >= (NSNumber, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-32ixl",
            "title" : "func <= <Root, Value>(Value, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-34x9v",
            "title" : "func >= <Value>(NSPredicate.Key, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-3809u",
            "title" : "func >= <Root, Value>(Value, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-3bb5u",
            "title" : "func >= <Root, Value>(Value, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-3bwh",
            "title" : "func >= <Root>(KeyPath<Root, NSNumber>, NSNumber) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-3czez",
            "title" : "func <= <Value>(NSPredicate.Key, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-3gra4",
            "title" : "func <= <Root, Value>(KeyPath<Root, Value>, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-3hm86",
            "title" : "func <= <Root, Value>(Value, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-47bvq",
            "title" : "func >= <Root, Value>(Value, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-4dxnl",
            "title" : "func >= <Root, Value>(KeyPath<Root, Value>, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-4e197",
            "title" : "func >= <Root, Value>(KeyPath<Root, Value>, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-4ro65",
            "title" : "func <= <Root, Value>(Value, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-4sfjj",
            "title" : "func >= <Value>(Value, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-4y71u",
            "title" : "func <= <Value>(Value, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-5j8pt",
            "title" : "func >= <Root, Value>(KeyPath<Root, Value>, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-5mbco",
            "title" : "func <= <Value>(Value, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-5qq71",
            "title" : "func <= (NSPredicate.Key, NSNumber) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-5yo1v",
            "title" : "func >= <Value>(Value, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-623qu",
            "title" : "func >= (NSPredicate.Key, NSNumber) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-6k31s",
            "title" : "func >= <Root>(NSNumber, KeyPath<Root, NSNumber>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-6z10g",
            "title" : "func >= <Root, Value>(Value, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-71v8h",
            "title" : "func <= <Root, Value>(Value, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-729n5",
            "title" : "func <= <Value>(Value, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-73d4y",
            "title" : "func >= <Root, Value>(KeyPath<Root, Value>, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-7cyl4",
            "title" : "func >= <Value>(NSPredicate.Key, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-7zjwu",
            "title" : "func <= <Value>(Value, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-8b1rn",
            "title" : "func >= <Value>(NSPredicate.Key, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-8d0w6",
            "title" : "func <= <Root, Value>(KeyPath<Root, Value>, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-8hvod",
            "title" : "func <= <Root, Value>(KeyPath<Root, Value>, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-8nrtx",
            "title" : "func >= <Value>(Value, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-8poie",
            "title" : "func >= <Value>(NSPredicate.Key, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-8q2sp",
            "title" : "func <= <Value>(NSPredicate.Key, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-8xdpu",
            "title" : "func <= <Value>(Value, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-8zaro",
            "title" : "func <= <Root, Value>(KeyPath<Root, Value>, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-9792f",
            "title" : "func <= <Value>(NSPredicate.Key, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-9gebd",
            "title" : "func <= <Value>(NSPredicate.Key, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-gstf",
            "title" : "func <= <Root, Value>(KeyPath<Root, Value>, Value) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-o1gk",
            "title" : "func <= <Root, Value>(Value, KeyPath<Root, Value>) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/_=(_:_:)-xlpm",
            "title" : "func >= <Value>(Value, NSPredicate.Key) -> NSPredicate",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/fffoundation\/__(_:_:)",
            "title" : "func || (NSPredicate, NSPredicate) -> NSPredicate",
            "type" : "op"
          },
          {
            "title" : "Type Aliases",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/fffoundation\/anytimer",
            "title" : "AnyTimer",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/fffoundation\/elementdiff",
            "title" : "ElementDiff",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/fffoundation\/gcdfutureresult",
            "title" : "GCDFutureResult",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/fffoundation\/simplediff",
            "title" : "SimpleDiff",
            "type" : "typealias"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/cachingerror\/couldnotdeserialize(underlyingerror:)",
                "title" : "case couldNotDeserialize(underlyingError: Error?)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/fffoundation\/cachingerror\/couldnotserialize(underlyingerror:)",
                "title" : "case couldNotSerialize(underlyingError: Error?)",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/fffoundation\/cachingerror\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cachingerror\/halfwidthcornerquoted",
                    "title" : "var halfWidthCornerQuoted: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/cachingerror\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/fffoundation\/cachingerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/fffoundation\/cachingerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/fffoundation\/cachingerror",
            "title" : "CachingError",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/fffoundation",
        "title" : "FFFoundation",
        "type" : "module"
      }
    ]
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 1,
    "patch" : 0
  }
}